t.test(c(1), c(2,3,4))
t.test(c(2,3,4))
load('~/Projects/data/sanger/drugs/DRUG_ANALYSIS_SET_20150123.rdata')
DRUG_ANALYSIS_SET
head(DRUG_ANALYSIS_SET)
write.table(DRUG_ANALYSIS_SET, '~/Projects/data/sanger/drugs/drug_samplesheet.tab', sep='/t', quote=F, row.names = F)
write.table(DRUG_ANALYSIS_SET, '~/Projects/data/sanger/drugs/drug_samplesheet.tab', sep='\t', quote=F, row.names = F)
load('~/Downloads/marti/CH003.RData')
head(PatientResults)
head(PatientResults$AllNwsPatient)
write.table(PatientResults$AllNwsPatient, '~/Downloads/marti/table.tab', sep='\t', quote=F)
wGSEA<-function(ranking,norm_express,signature,p=1,display=TRUE,returnRS=FALSE,significance=FALSE,trial=1000){
signature<-unique(intersect(signature,ranking))
HITS<-is.element(ranking,signature)+0
R<-norm_express*HITS
hitCases<-cumsum(abs(R)^p)
NR<-sum(abs(R)^p)
missCases<-cumsum(1-HITS)
N<-length(ranking)
N_Nh<-length(ranking)-length(signature)
Phit<-hitCases/NR
Pmiss<-missCases/N_Nh
m<-max(abs(Phit-Pmiss))
t<-which(abs(Phit-Pmiss)==m)
if (length(t)>1){t<-t[1]}
peak<-t
ES<-Phit[t]-Pmiss[t]
RS<-Phit-Pmiss
names(ES)<-NULL
if (display){
if (ES>=0){c<-"red"}else{c<-"green"}
plot(0:N,c(0,Phit-Pmiss),col=c,type="l",xlim=c(0,N),ylim=c(-(abs(ES)+0.5*(abs(ES))),abs(ES)+0.5*(abs(ES))),xaxs="i",bty="l",axes=FALSE,
xlab="Gene Rank Position",ylab="Running Sum")
par(new=TRUE)
plot(0:N,rep(0,N+1),col='gray',type="l",new=FALSE,xlab="",ylab="",ylim=c(-(abs(ES)+0.5*(abs(ES))),abs(ES)+0.5*(abs(ES))))
axis(side=2)
}
P<-NA
if(significance){
EMPES<-computeSimpleEMPES(ranking,norm_express,signature,trial)
P<-(ES>=0)*(length(which(EMPES>=ES))/trial)+(ES<0)*(length(which(EMPES<=ES))/trial)
}
if (returnRS){
POSITIONS<-which(HITS==1)
names(POSITIONS)<-ranking[which(HITS==1)]
POSITIONS<-POSITIONS[order(names(POSITIONS))]
names(POSITIONS)<-names(POSITIONS)[order(names(POSITIONS))]
return(list(ES=ES,RS=RS,POSITIONS=POSITIONS,PEAK=t))
} else {if (significance) return(list(ES=ES,P=P))
else return(ES)}
}
computeSimpleEMPES<-function(ranking,exp_value_profile,signature,trials){
ngenes<-length(ranking)
siglen<-length(intersect(signature,ranking))
ES<-rep(NA,trials)
for (i in 1:trials){
shuffled_signature<-ranking[sample(1:ngenes,siglen)]
tmp<-wGSEA(ranking,exp_value_profile,shuffled_signature,display=FALSE,significance=FALSE)
ES[i]<-tmp
}
return(ES)
}
dataset <- read.csv('~/Downloads/test_dataset.csv')
dataset
dataset <- read.table('~/Downloads/test_dataset.csv', row.names = 1)
dataset
dataset <- read.table('~/Downloads/test_dataset.csv', row.names = T)
dataset <- read.table('~/Downloads/test_dataset.csv', sep=',', row.names = 1)
dataset
head(dataset)
head(sort(dataset)
)
sort(dataset)
sort(dataset$V2)
order(dataset$V2)
dataset[order(dataset$V2),]
dataset[order(dataset$V2)]
d_order = order(dataset$V2)
wGSEA(rownames(dataset)[d_order], dataset)
rownames(dataset)[d_order]
dataset$V2[d_order]
wGSEA(rownames(dataset)[d_order], dataset$V2[d_order], significance = T)
wGSEA(rownames(dataset)[d_order], dataset$V2[d_order], c('YMR202W'), significance = T)
library(limma)
# Files paths
organism = 2 # 1: human, 2: mouse
tp_human_file = c(
'/Users/emanuel/Projects/projects/frezza_fh/tables/protein_human_processed.tab',
'/Users/emanuel/Projects/projects/frezza_fh/tables/protein_mouse_processed.tab'
)[organism]
tp_result_file = c(
'/Users/emanuel/Projects/projects/frezza_fh/tables/protein_human_limma.tab',
'/Users/emanuel/Projects/projects/frezza_fh/tables/protein_mouse_limma.tab'
)[organism]
# Import data-sets
tp <- read.table(tp_human_file, sep='\t', row.names=1, header=T, stringsAsFactors=F, check.names=F)
# ---- Proteomics
# Run differential analysis
tp_design <- cbind(KO=rep(c(1,0), each=3), WT=rep(c(0,1), each=3))
tp_fit <- lmFit(tp, tp_design)
tp_cont_matrix <- makeContrasts(KOvsWT=KO-WT, levels=tp_design)
tp_fit_2 <- contrasts.fit(tp_fit, tp_cont_matrix)
tp_fit_2 <- eBayes(tp_fit_2)
tp_result <- as.data.frame(topTable(tp_fit_2, adjust.method='fdr', n=Inf))
tp_result$p.value.log10 <- -log10(tp_result$adj.P.Val)
# Store reults
write.table(tp_result, tp_result_file, sep='\t', quote=F)
source("http://bioconductor.org/biocLite.R")
biocLite("BioNet")
source('~/.active-rstudio-document')
library(BioNet)library(DLBCL)data(dataLym)data(interactome)
library(BioNet)
library(DLBCL)
install.packages(DLBCL)
source("http://bioconductor.org/biocLite.R")
biocLite("DLBCL")
library(DLBCL)
data(dataLym)
data(interactome)
dataLym
head(dataLym)
head(interactome)
interactome
pvals <- cbind(t = dataLym$t.pval, s = dataLym$s.pval)
rownames(pvals) <- dataLym$label
pval <- aggrPvals(pvals, order = 2, plot = FALSE)
pval
subnet <- subNetwork(dataLym$label, interactome)subnet <- rmSelfLoops(subnet)subnet
subnet <- subNetwork(dataLym$label, interactome)
subnet <- rmSelfLoops(subnet)
subnet
fb <- fitBumModel(pval, plot = FALSE)
scores <- scoreNodes(subnet, fb, fdr = 0.001)
scores
module <- runFastHeinz(subnet, scores)
logFC <- dataLym$diffnames(logFC) <- dataLym$label
logFC <- dataLym$diff
names(logFC) <- dataLym$label
logFC
plotModule(module, scores = scores, diff.expr = logFC)
?runFastHeinz
module <- runHeinz(subnet, scores)
na.omit(rbind(apply(dataset, 1, function(row) {  if (row['Label'] %in% conditions)    row})))
library(BioNet)library(DLBCL)# Configure workplacesetwd('~/Projects/projects/liverx/src/liverx/r/')# Import data-setdataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')# Import networknetwork <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')# Sub-network for conditionconditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)')na.omit(rbind(apply(dataset, 1, function(row) {  if (row['Label'] %in% conditions)    row})))
library(BioNet)library(DLBCL)# Configure workplacesetwd('~/Projects/projects/liverx/src/liverx/r/')# Import data-setdataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')# Import networknetwork <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')# Sub-network for conditionconditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)')na.omit(rbind(apply(dataset, 1, function(row) {  if (row['Label'] %in% conditions)    row})))sub_dataset <- na.omit(dataset[which(dataset['Label'] %in% conditions),])pvals <- sub_dataset[, 'pvalue']names(pvals) <- sub_dataset[, 'Protein']pvals[which(pvals == 0)] <- min(pvals[which(pvals != 0)])# Reduce PPI network sizesub_network <- subNetwork(names(pvals), network)sub_network <- largestComp(sub_network)sub_network <- rmSelfLoops(sub_network)# Fit Beta-uniform mixture modelfb <- fitBumModel(pvals)scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-10)plot(scores, pvals[names(scores)])plot(-log10(pvals[names(scores)]), pvals[names(scores)])# Write files to run HeinzwriteHeinzEdges(network=sub_network, file='ALL_edges_001', use.score=FALSE)writeHeinzNodes(network=sub_network, file='ALL_nodes_001', node.scores=scores)# Execute Heinzsystem('./heinz -e ALL_edges_001.txt -n ALL_nodes_001.txt -o ALL_solution_001.txt')# Importing the solution of a maxinum-scoring subnetworkmodule <- readHeinzGraph(node.file='ALL_solution_001.txt', network=sub_network)nodeDataDefaults(module, attr='score') <- ''nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]# Export networksaveNetwork(module, file='ALL_module', type='XGMML')
library(BioNet)
library(DLBCL)
# Configure workplace
setwd('~/Projects/projects/liverx/src/liverx/r/')
# Import data-set
dataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')
# Import network
network <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')
# Sub-network for condition
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)')
na.omit(rbind(apply(dataset, 1, function(row) {
if (row['Label'] %in% conditions)
row
})))
dataset[,'Label']
dataset[,'Label'] %in% conditions
dataset[which(dataset[,'Label'] %in% conditions),]
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
library(reshape)
head(sub_dataset)
sub_dataset
sub_dataset
head(sub_dataset)
sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
cast(sub_dataset, Protein ~ Label)
sub_dataset <- cast(sub_dataset, Protein ~ Label)
sub_dataset
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
sub_dataset
head(sub_dataset)
?aggrPvals
aggrPvals(sub_dataset, order=3)
sub_dataset
as.matrix(sub_dataset)
typeof(sub_dataset)
typeof(as.matrix(sub_dataset))
typeof(as.data.frame(sub_dataset))
as.data.frame(sub_dataset)
head(as.data.frame(sub_dataset))
?cast
sub_dataset
rownames(sub_dataset)
rownames(sub_dataset) <- sub_dataset['Protein']
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset[, -1]
head(sub_dataset[, -1])
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
sub_dataset
typeof(sub_dataset)
as.matrix(sub_dataset)
aggrPvals(sub_dataset, order=3)
aggrPvals(as.matrix(sub_dataset), order=3)
sub_dataset
sub_dataset
as.matrix(sub_dataset)
as.data.frame(sub_dataset)
aggrPvals(as.data.frame(sub_dataset), order=3)
pvals <- aggrPvals(as.matrix(sub_dataset), order=3)
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
pvals <- aggrPvals(as.matrix(sub_dataset), order=3, plot=F)
pvals
names(pvals) <- rownames(sub_dataset)
tail(sub_dataset)
conditions <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
pvals <- aggrPvals(as.matrix(sub_dataset), order=3, plot=F)
names(pvals) <- rownames(sub_dataset)
pvals
sub_network <- subNetwork(names(pvals), network)
sub_network <- largestComp(sub_network)
sub_network <- rmSelfLoops(sub_network)
# Fit Beta-uniform mixture model
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-10)
fb <- fitBumModel(pvals)
pvals
pvals == 0
pvals[pvals == 0]
pvals[pvals != 0]
min(pvals[pvals != 0])
pvals[pvals == 0] = min(pvals[pvals != 0])
pvals
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-10)
plot(scores, pvals[names(scores)])
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-8)
plot(scores, pvals[names(scores)])
plot(-log10(pvals[names(scores)]), pvals[names(scores)])
writeHeinzEdges(network=sub_network, file='H2_edges_001', use.score=FALSE)
writeHeinzNodes(network=sub_network, file='H2_nodes_001', node.scores=scores)
system('./heinz -e H2_edges.txt -n H2_nodes.txt -o H2_solution.txt')
writeHeinzEdges(network=sub_network, file='H2_edges', use.score=FALSE)
writeHeinzNodes(network=sub_network, file='H2_nodes', node.scores=scores)
# Execute Heinz
system('./heinz -e H2_edges.txt -n H2_nodes.txt -o H2_solution.txt')
# Importing the solution of a maxinum-scoring subnetwork
module <- readHeinzGraph(node.file='H2_solution.txt', network=sub_network)
nodeDataDefaults(module, attr='score') <- ''
nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]
# Export network
saveNetwork(module, file='H2_module', type='XGMML')
conditions['H2'] <- c('(B6_T2_fed-B6_T1_fed) - (S9_T2_fed-S9_T1_fed)', '(B6_T2_fed-B6_T0_fed ) - (S9_T2_fed-S9_T0_fed)', '(B6_T1_fed-B6_T0_fed) - (S9_T1_fed-S9_T0_fed)')
conditions
conditions['H4'] <- c('(B6_T1_FED-FASTED - B6_T0_FED-FASTED )- (S9_T1_FED-FASTED - S9_T0_FED-FASTED)', '(B6_T2_FED-FASTED - B6_T0_FED-FASTED) - (S9_T2_FED-FASTED - S9_T0_FED-FASTED)')
conditions
conditions['H4']
conditions['H2']
read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt')
read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t')
read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t', header=T)
comparisons <- read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t', header=T)
condition = 'H2'
which(comparisons['label'] == condition)
which(comparisons[,'label'] == condition)
condition
which(comparisons['hypothesis'] == condition)
comparisons[which(comparisons['hypothesis'] == condition)]
comparisons[which(comparisons['hypothesis'] == condition), 'label']
conditions = comparisons[which(comparisons['hypothesis'] == condition), 'label']
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
sub_dataset
paste(condition, '_edges', sep='')
paste(condition, '_nodes', sep='')
run_heinz_cmd <- paste('./heinz -e ', condition, '_edges.txt -n ', condition, '_nodes.txt -o ', condition, '_solution.txt', sep='')
run_heinz_cmd
paste(condition, '_solution.txt', sep='')
condition = 'H4'
library(BioNet)
library(DLBCL)
library(reshape)
# Configure workplace
setwd('~/Projects/projects/liverx/src/liverx/r/')
# Import data-set
dataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')
# Import network
network <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')
# Import hypothesis conditions
comparisons <- read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t', header=T)
conditions = comparisons[which(comparisons['hypothesis'] == condition), 'label']
# Sub-set data-set comparisons to hypothesis
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
# Sub-set data-set comparisons to hypothesis
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
sub_dataset
head(sub_dataset)
pvals <- aggrPvals(as.matrix(sub_dataset), order=3, plot=F)
names(pvals) <- rownames(sub_dataset)
lengt(sub_dataset)
length(sub_dataset)
pvals <- aggrPvals(as.matrix(sub_dataset), order=length(sub_dataset), plot=F)
pvals
names(pvals) <- rownames(sub_dataset)
pvals[pvals == 0]
min(pvals[pvals != 0])
pvals[pvals == 0] <- min(pvals[pvals != 0])
sub_network <- subNetwork(names(pvals), network)
sub_network <- largestComp(sub_network)
sub_network <- rmSelfLoops(sub_network)
sub_network
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-8)
plot(scores, pvals[names(scores)])
library(BioNet)
library(DLBCL)
library(reshape)
# Configure workplace
setwd('~/Projects/projects/liverx/src/liverx/r/')
# Import data-set
dataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')
# Import network
network <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')
# Import hypothesis conditions
comparisons <- read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t', header=T)
# Sub-network for condition
lapply(c('H2', 'H4'), function (condition) {
# Get condition comparisons
conditions <- comparisons[which(comparisons['hypothesis'] == condition), 'label']
# Sub-set data-set comparisons to hypothesis
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
pvals <- aggrPvals(as.matrix(sub_dataset), order=length(sub_dataset), plot=F)
names(pvals) <- rownames(sub_dataset)
pvals[pvals == 0] <- min(pvals[pvals != 0])
# Reduce PPI network size
sub_network <- subNetwork(names(pvals), network)
sub_network <- largestComp(sub_network)
sub_network <- rmSelfLoops(sub_network)
# Fit Beta-uniform mixture model
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-8)
plot(scores, pvals[names(scores)])
# Write files to run Heinz
writeHeinzEdges(network=sub_network, file=paste(condition, '_edges', sep=''), use.score=FALSE)
writeHeinzNodes(network=sub_network, file=paste(condition, '_nodes', sep=''), node.scores=scores)
# Execute Heinz
run_heinz_cmd <- paste('./heinz -e ', condition, '_edges.txt -n ', condition, '_nodes.txt -o ', condition, '_solution.txt', sep='')
system(run_heinz_cmd)
# Importing the solution of a maxinum-scoring subnetwork
module <- readHeinzGraph(node.file=paste(condition, '_solution.txt', sep=''), network=sub_network)
nodeDataDefaults(module, attr='score') <- ''
nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]
# Export network
saveNetwork(module, file=paste(condition, '_module', sep=''), type='XGMML')
})
?aggrPvals
aggrPvals
condition = 'H2'
conditions <- comparisons[which(comparisons['hypothesis'] == condition), 'label']
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
as.matrix(sub_dataset)
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- as.matrix(na.omit(cast(sub_dataset, Protein ~ Label)))
sub_dataset
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
aggrPvals
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])
sub_dataset <- sub_dataset[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- na.omit(cast(sub_dataset, Protein ~ Label))
sub_dataset
rownames(sub_dataset) <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
sub_dataset
proteins <- rownames(sub_dataset)
sub_dataset
as.matrix(sub_dataset)
sub_dataset <- as.matrix(sub_dataset)
sub_dataset
rownames(sub_dataset) <- proteins
sub_dataset
aggrPvals(sub_dataset, order=length(sub_dataset), plot=F)
sub_dataset
length(sub_dataset)
dim(sub_dataset)
dim(sub_dataset)[2]
aggrPvals(sub_dataset, order=dim(sub_dataset)[2], plot=F)
pvals <- aggrPvals(sub_dataset, order=dim(sub_dataset)[2], plot=F)
pvals
sub_dataset <- na.omit(dataset[which(dataset[,'Label'] %in% conditions),])[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset
sub_dataset <- dataset[which(dataset[,'Label'] %in% conditions),])[, c('Protein', 'Label', 'adj.pvalue')]
sub_dataset <- dataset[which(dataset[,'Label'] %in% conditions),]
sub_dataset
na.omit(cast(sub_dataset[, c('Protein', 'Label', 'adj.pvalue')], Protein ~ Label))
sub_dataset <- na.omit(cast(sub_dataset[, c('Protein', 'Label', 'adj.pvalue')], Protein ~ Label))
proteins <- sub_dataset[,'Protein']
sub_dataset <- sub_dataset[, -1]
sub_dataset <- dataset[which(dataset[,'Label'] %in% conditions),]
sub_dataset <- na.omit(cast(sub_dataset[, c('Protein', 'Label', 'adj.pvalue')], Protein ~ Label))
sub_dataset
proteins <- sub_dataset[,'Protein']
sub_dataset <-  as.matrix(sub_dataset[, -1])
sub_dataset
rownames(sub_dataset) <- proteins
sub_dataset
dim(sub_dataset)[2]
pvals <- aggrPvals(sub_dataset, order=dim(sub_dataset)[2], plot=F)
pvals
pvals[pvals == 0] <- min(pvals[pvals != 0])
# Reduce PPI network size
sub_network <- subNetwork(names(pvals), network)
sub_network <- largestComp(sub_network)
sub_network <- rmSelfLoops(sub_network)
# Fit Beta-uniform mixture model
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-8)
plot(scores, pvals[names(scores)])
# Write files to run Heinz
writeHeinzEdges(network=sub_network, file=paste(condition, '_edges', sep=''), use.score=FALSE)
writeHeinzNodes(network=sub_network, file=paste(condition, '_nodes', sep=''), node.scores=scores)
# Execute Heinz
run_heinz_cmd <- paste('./heinz -e ', condition, '_edges.txt -n ', condition, '_nodes.txt -o ', condition, '_solution.txt', sep='')
system(run_heinz_cmd)
# Importing the solution of a maxinum-scoring subnetwork
module <- readHeinzGraph(node.file=paste(condition, '_solution.txt', sep=''), network=sub_network)
nodeDataDefaults(module, attr='score') <- ''
nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]
# Export network
saveNetwork(module, file=paste(condition, '_module', sep=''), type='XGMML')
library(BioNet)
library(DLBCL)
library(reshape)
# Configure workplace
setwd('~/Projects/projects/liverx/src/liverx/r/')
# Import data-set
dataset <- read.csv('~/Projects/projects/liverx/data/result_swath_v2.3.7_fRfS.csv')
# Import network
network <- loadNetwork.tab('~/Projects/projects/liverx/files/genemania_mouse_network_filtered.txt', header=T, directed=F, format='graphNEL')
# Import hypothesis conditions
comparisons <- read.table('~/Projects/projects/liverx/files/hypothesis_conditions.txt', sep='\t', header=T)
# Sub-network for condition
lapply(c('H2', 'H4'), function (condition) {
# Get condition comparisons
conditions <- comparisons[which(comparisons['hypothesis'] == condition), 'label']
# Sub-set data-set comparisons to hypothesis
sub_dataset <- dataset[which(dataset[,'Label'] %in% conditions),]
sub_dataset <- na.omit(cast(sub_dataset[, c('Protein', 'Label', 'adj.pvalue')], Protein ~ Label))
proteins <- sub_dataset[,'Protein']
sub_dataset <-  as.matrix(sub_dataset[, -1])
rownames(sub_dataset) <- proteins
pvals <- aggrPvals(sub_dataset, order=dim(sub_dataset)[2], plot=F)
pvals[pvals == 0] <- min(pvals[pvals != 0])
# Reduce PPI network size
sub_network <- subNetwork(names(pvals), network)
sub_network <- largestComp(sub_network)
sub_network <- rmSelfLoops(sub_network)
# Fit Beta-uniform mixture model
fb <- fitBumModel(pvals)
scores <- scoreNodes(network=sub_network, fb=fb, fdr=1e-8)
plot(scores, pvals[names(scores)])
# Write files to run Heinz
writeHeinzEdges(network=sub_network, file=paste(condition, '_edges', sep=''), use.score=FALSE)
writeHeinzNodes(network=sub_network, file=paste(condition, '_nodes', sep=''), node.scores=scores)
# Execute Heinz
run_heinz_cmd <- paste('./heinz -e ', condition, '_edges.txt -n ', condition, '_nodes.txt -o ', condition, '_solution.txt', sep='')
system(run_heinz_cmd)
# Importing the solution of a maxinum-scoring subnetwork
module <- readHeinzGraph(node.file=paste(condition, '_solution.txt', sep=''), network=sub_network)
nodeDataDefaults(module, attr='score') <- ''
nodeData(module, n=nodes(module), attr='score') <- scores[nodes(module)]
# Export network
saveNetwork(module, file=paste(condition, '_module', sep=''), type='XGMML')
})
